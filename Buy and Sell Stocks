1. Best Time to Buy and Sell Stock

You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Solution:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0
        buy = prices[0]
        for x in prices[1:]:
            sell = x
            profit = max(profit, sell-buy)
            buy = min(buy,x)
        return profit
***************************************************************************************************************************************************************************
2. Best Time to Buy and Sell Stock II

You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. 
However, you can buy it then immediately sell it on the same day.
Find and return the maximum profit you can achieve.

Solution:

class Solution(object):
    def maxProfit(self, prices):
        profit=0
        for i in range(0, len(prices)-1):
            if prices[i+1]>prices[i]:
                profit= profit + prices[i+1]- prices[i]
        return (profit)
***************************************************************************************************************************************************************************
3. Best Time to Buy and Sell Stock III

You are given an array prices where prices[i] is the price of a given stock on the ith day.
Find the maximum profit you can achieve. You may complete at most two transactions.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Solution:

class Solution:
    def maxProfit(self, prices):
        n = len(prices)
        if not prices or n<2:
            return 0        
        def one_max_profit(start, end):
            profit = 0
            buy = start
            for x in range(start+1, end+1):
                profit = max(profit, prices[x]-prices[buy])
                if prices[x] < prices[buy]:
                    buy = x
            return profit      
        max_profit = 0
        for i in range(n):
            temp_max = one_max_profit(0, i) + one_max_profit(i+1, n-1)
            max_profit = max(temp_max, max_profit)
        return max_profit 
***************************************************************************************************************************************************************************
**********************************************************************************************************************************************        
        
4. Best Time to Buy and Sell Stock with Cooldown
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]


class Solution:
    def maxProfit(self, prices):
        buy, sell, prev_sell = 10**10, 0, 0,
        for cur in prices:
              buy, sell, prev_sell = min(buy, cur-prev_sell), max(cur - buy, sell), sell
        return sell
        
        
        
**********************************************************************************************************************************************
5. Best Time to Buy and Sell Stock with Transaction Fee

You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note:

You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
The transaction fee is only charged once for each stock purchase and sale.
 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.


class Solution(object):
    def maxProfit(self, prices, fee):
        profit, max_diff = 0, float('-inf')
        for i in range(len(prices)):
            hold = profit
            transact = prices[i] - fee + max_diff if i > 0 else 0
            max_diff = max(max_diff, profit-prices[i])
            profit = max(hold, transact)
        return profit
**********************************************************************************************************************************************        
